{"version":3,"sources":["pages/App.tsx","serviceWorker.ts","index.tsx"],"names":["painters","styles","menu","background","textAlign","menuItem","color","fontSize","height","Boolean","window","location","hostname","match","ReactDOM","render","useState","activeItem","setActiveItem","paintings","setPaintings","loading","setLoading","fetchData","a","fetch","response","json","data","records","useEffect","console","log","style","backgroundColor","Menu","map","painter","index","Item","name","active","onClick","Dimmer","Loader","size","Image","Group","flex","marginLeft","painting","primaryimageurl","src","centered","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oTAIMA,G,OAAW,CAAC,oBAAqB,eAAgB,WAAY,mBA0DnE,IAAMC,EAAS,CACbC,KAAM,CACJC,WAAY,QACZC,UAAW,UAEbC,SAAU,CACRC,MAAO,QACPC,SAAU,GACVC,OAAQ,KC1DQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFED,WAAgB,IAAD,EAEQC,mBAAS,qBAFjB,mBAErBC,EAFqB,KAETC,EAFS,OAGMF,mBAAS,IAHf,mBAGrBG,EAHqB,KAGVC,EAHU,OAIEJ,oBAAS,GAJX,mBAIrBK,EAJqB,KAIZC,EAJY,KAMtBC,EAAS,uCAAG,8BAAAC,EAAA,6DAChBF,GAAW,GADK,SAEOG,MAAM,8CAAD,OAA+CR,EAA/C,mBAVjB,uCAUiB,wBAFZ,cAEVS,EAFU,gBAGGA,EAASC,OAHZ,OAGVC,EAHU,OAIhBR,EAAaQ,EAAKC,SAClBP,GAAW,GALK,2CAAH,qDAcf,OANAQ,qBAAU,WACRP,MACC,CAACN,IAGJc,QAAQC,IAAIb,GAEV,oCACE,yBAAKc,MAAO,CAAEC,gBAAiB,YAE7B,kBAACC,EAAA,EAAD,CACEF,MAAOhC,EAAOC,MAEbF,EAASoC,KAAI,SAACC,EAASC,GAAV,OACZ,kBAACH,EAAA,EAAKI,KAAN,CACEN,MAAK,eAAOhC,EAAOI,UACnBmC,KAAMH,EACN/B,MAAO,SACPmC,OAAQxB,IAAeoB,EACvBK,QAAS,kBAAMxB,EAAcmB,UAKnC,kBAACM,EAAA,EAAD,CAAQF,OAAQpB,GACd,kBAACuB,EAAA,EAAD,CAAQC,KAAK,QAAb,YAGF,kBAACC,EAAA,EAAMC,MAAP,CAAaF,KAAK,SAASZ,MAAO,CAAEe,KAAM,EAAGC,WAAY,KACtD9B,EAAUiB,KAAI,SAACc,GAEd,OADAnB,QAAQC,IAAIkB,GACJA,EAASC,iBAAmB,kBAACL,EAAA,EAAD,CAAOM,IAAG,UAAKF,EAASC,gBAAd,yBAAsDE,UAAQ,YE/CxG,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.aa9bf31b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Menu, Image, Dimmer, Loader } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\n\nconst painters = ['Leonardo Da Vinci', 'Claude Monet', 'Van Gogh', 'William Turner']\n\nconst apiKey = \"ccfb43d0-49a2-11ea-89db-0d1e2aec8854\"\n\nexport default function App() {\n\n  const [activeItem, setActiveItem] = useState('Leonardo Da Vinci');\n  const [paintings, setPaintings] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  const fetchData = async () => {\n    setLoading(true)\n    const response = await fetch(`https://api.harvardartmuseums.org/object?q=${activeItem}&apikey=${apiKey}&hasimage=1&size=20`)\n    const data = await response.json()\n    setPaintings(data.records)\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [activeItem])\n\n\n  console.log(paintings)\n  return (\n    <>\n      <div style={{ backgroundColor: \"#14181c\" }}>\n\n        <Menu\n          style={styles.menu}\n        >\n          {painters.map((painter, index) => (\n            <Menu.Item\n              style={{ ...styles.menuItem }}\n              name={painter}\n              color={\"orange\"}\n              active={activeItem === painter}\n              onClick={() => setActiveItem(painter)}\n            />\n          ))}\n        </Menu>\n\n        <Dimmer active={loading}>\n          <Loader size='huge'>Loading</Loader>\n        </Dimmer>\n\n        <Image.Group size='medium' style={{ flex: 1, marginLeft: 80 }}>\n          {paintings.map((painting: any) => {\n            console.log(painting)\n            return (painting.primaryimageurl && <Image src={`${painting.primaryimageurl}?width=300&height=300`} centered />)\n          })}\n        </Image.Group>\n      </div>\n    </>\n\n  )\n}\n\nconst styles = {\n  menu: {\n    background: 'black',\n    textAlign: 'center'\n  },\n  menuItem: {\n    color: 'white',\n    fontSize: 35,\n    height: 50\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}